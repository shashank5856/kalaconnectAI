import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const ContentResultsPanel = ({ generatedContent, isGenerating, selectedLanguage }) => {
  const [activeTab, setActiveTab] = useState('story');
  const [copiedSection, setCopiedSection] = useState(null);

  const copyToClipboard = async (text, section) => {
    try {
      await navigator?.clipboard?.writeText(text);
      setCopiedSection(section);
      setTimeout(() => setCopiedSection(null), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const downloadAsText = () => {
    if (!generatedContent) return;
    
    const content = `
Generated Content - ${new Date()?.toLocaleDateString()}
Language: ${selectedLanguage?.toUpperCase() || 'EN'}

=== STORY ===
${generatedContent?.story || 'Not available'}

=== SOCIAL MEDIA CAPTION ===
${generatedContent?.socialCaption || 'Not available'}

=== HERITAGE CONTEXT ===
${generatedContent?.heritageContext || 'Not available'}

---
Generated by KalaConnect AI using Google Gemini
    `?.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `craft-content-${Date.now()}.txt`;
    a?.click();
    URL.revokeObjectURL(url);
  };

  const tabs = [
    { id: 'story', label: 'Story', icon: 'BookOpen' },
    { id: 'social', label: 'Social Media', icon: 'Share' },
    { id: 'heritage', label: 'Heritage', icon: 'Landmark' },
  ];

  const getContentForTab = (tabId) => {
    switch (tabId) {
      case 'story':
        return generatedContent?.story || '';
      case 'social':
        return generatedContent?.socialCaption || '';
      case 'heritage':
        return generatedContent?.heritageContext || '';
      default:
        return '';
    }
  };

  return (
    <div className="bg-card rounded-lg border border-border p-6 shadow-soft">
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-2">
          <Icon name="FileText" size={20} className="text-primary" />
          <h3 className="text-lg font-heading font-semibold text-foreground">
            Generated Content
          </h3>
        </div>
        {generatedContent && (
          <Button
            onClick={downloadAsText}
            variant="outline"
            size="sm"
            iconName="Download"
            iconSize={16}
          >
            Export
          </Button>
        )}
      </div>
      {/* Loading State */}
      {isGenerating && (
        <div className="space-y-6">
          <div className="flex justify-center items-center py-12">
            <div className="text-center space-y-4">
              <div className="w-12 h-12 border-4 border-primary/20 border-t-primary rounded-full animate-spin mx-auto"></div>
              <p className="text-text-secondary">
                Gemini AI is crafting authentic content...
              </p>
            </div>
          </div>
          
          {/* Skeleton tabs */}
          <div className="border-b border-border">
            <div className="flex space-x-6">
              {tabs?.map((tab) => (
                <div key={tab?.id} className="py-2 px-1">
                  <div className="h-4 w-20 bg-muted rounded animate-pulse"></div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Skeleton content */}
          <div className="space-y-3">
            <div className="h-4 bg-muted rounded animate-pulse w-full"></div>
            <div className="h-4 bg-muted rounded animate-pulse w-5/6"></div>
            <div className="h-4 bg-muted rounded animate-pulse w-4/6"></div>
            <div className="h-4 bg-muted rounded animate-pulse w-full"></div>
            <div className="h-4 bg-muted rounded animate-pulse w-3/6"></div>
          </div>
        </div>
      )}
      {/* Empty State */}
      {!isGenerating && !generatedContent && (
        <div className="text-center py-12 space-y-4">
          <div className="w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto">
            <Icon name="Sparkles" size={32} className="text-text-secondary" />
          </div>
          <div className="space-y-2">
            <p className="text-lg font-medium text-foreground">
              Ready to Generate
            </p>
            <p className="text-text-secondary">
              Upload an image and add keywords to start generating culturally rich content with Gemini AI
            </p>
          </div>
          <div className="flex items-center justify-center space-x-2 text-xs text-text-secondary">
            <Icon name="Zap" size={12} className="text-primary" />
            <span>Powered by Google Gemini</span>
          </div>
        </div>
      )}
      {/* Generated Content Display */}
      {!isGenerating && generatedContent && (
        <div className="space-y-6">
          {/* Tab Navigation */}
          <div className="border-b border-border">
            <div className="flex space-x-6">
              {tabs?.map((tab) => (
                <button
                  key={tab?.id}
                  onClick={() => setActiveTab(tab?.id)}
                  className={`flex items-center space-x-2 py-2 px-1 border-b-2 text-sm font-medium transition-cultural ${
                    activeTab === tab?.id
                      ? 'border-primary text-primary' :'border-transparent text-text-secondary hover:text-foreground hover:border-border'
                  }`}
                >
                  <Icon name={tab?.icon} size={16} />
                  <span>{tab?.label}</span>
                </button>
              ))}
            </div>
          </div>

          {/* Content Display */}
          <div className="space-y-4">
            <div className="relative">
              <div className="bg-muted/50 rounded-lg p-4 min-h-[200px]">
                <pre className="whitespace-pre-wrap text-sm text-foreground leading-relaxed font-sans">
                  {getContentForTab(activeTab) || 'No content available for this section.'}
                </pre>
              </div>
              
              {/* Copy Button */}
              {getContentForTab(activeTab) && (
                <Button
                  onClick={() => copyToClipboard(getContentForTab(activeTab), activeTab)}
                  size="sm"
                  variant="outline"
                  className="absolute top-2 right-2"
                  iconName={copiedSection === activeTab ? "Check" : "Copy"}
                  iconSize={14}
                >
                  {copiedSection === activeTab ? 'Copied!' : 'Copy'}
                </Button>
              )}
            </div>

            {/* Content Statistics */}
            <div className="flex items-center justify-between text-xs text-text-secondary">
              <span>{getContentForTab(activeTab)?.length || 0} characters</span>
              <span>~{Math.ceil((getContentForTab(activeTab)?.length || 0) / 5)} words</span>
            </div>
          </div>

          {/* Content Actions */}
          <div className="flex space-x-2">
            <Button
              onClick={() => copyToClipboard(getContentForTab(activeTab), 'all')}
              variant="outline"
              size="sm"
              iconName="Copy"
              iconSize={14}
            >
              Copy Section
            </Button>
            
            <Button
              onClick={() => {
                const allContent = `${generatedContent?.story || ''}\n\n${generatedContent?.socialCaption || ''}\n\n${generatedContent?.heritageContext || ''}`;
                copyToClipboard(allContent, 'all');
              }}
              variant="outline"
              size="sm"
              iconName="Clipboard"
              iconSize={14}
            >
              Copy All
            </Button>
          </div>
        </div>
      )}
      {/* Gemini Attribution */}
      <div className="mt-6 pt-4 border-t border-border">
        <div className="flex items-center justify-center space-x-2 text-xs text-text-secondary">
          <Icon name="Brain" size={12} className="text-primary" />
          <span>Generated by Google Gemini AI</span>
          <Icon name="Sparkles" size={12} className="text-accent" />
        </div>
      </div>
    </div>
  );
};

export default ContentResultsPanel;